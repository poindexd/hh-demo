mixin survey(text, date, completed)
	li(href='#').collection-item
			if completed
				i.material-icons.green-text done
			else
				i.material-icons.red-text remove
			&nbsp;&nbsp;
			= text

			label.right.hide-on-med-and-down= date

html
	head
		title Wellopp Dashboard
		meta(name='viewport', content='width=device-width, initial-scale=1')
		link(rel='stylesheet', href='./css/chartist.min.css')
		include include/head.jade


		style.
			main{
				display: block;
			}
			.row{
				margin-bottom: 0px;
			}
			.card-panel{
				opacity: 0;
			}
			.card-panel li, .side-nav li{
				opacity: 0;
			}
			p{
			color: black;
			}
			.ct-series-a .ct-line, .ct-series-a .ct-point{
				stroke: #afafaf;
			}
			.ct-series-b .ct-slice-donut {
				stroke: #4CAF50;
			}
			.ct-label.ct-horizontal{
				margin-left: -10px;
			}
			.ct-label.ct-vertical{
				margin-bottom: -10px;
			}
			.btn.right, a.right{
				margin-right: 10px;
			}
			a{
				color: #00bcd4; 
			}
			header, main, footer {
				padding-left: 240px;
			}

			@media only screen and (max-width : 992px) {
				header, main, footer {
					padding-left: 0;
				}
			}
			.tab a{
				color: #00bcd4 !important;
			}
			.tab i, .tab span{
					line-height: inherit;
					vertical-align: middle;
			}
			.tab span{
			margin-left: 10px;
			}
			h5{
			font-size: 1.2em;
			}
			
	body.grey.lighten-4
		ul#menu.side-nav.fixed.blue.darken-2
			li.center: include include/butterfly.jade
			li
				a.btn-flat.blue.darken-3.waves-effect.waves-light.white-text Patients
					i.material-icons.left.white-text person
			li
				a.btn-flat.waves-effect.waves-light.white-text Performance
					i.material-icons.left.white-text timeline
			li
				a.btn-flat.waves-effect.waves-light.white-text Messages
					i.material-icons.left.white-text chat

		header
			nav.green.lighten-1: .nav-wrapper(style='padding: 0px 20px')
				ul.hide-on-med-and-down.right
					li.no
						a Notifications
							span.new.badge 4
					li.no: a Account
					li.no: a Logout

				ul.left.hide-on-med-and-down
					li.no: a Patients
						i.material-icons.left navigate_before
				a.button-collapse(href="#", data-activates='menu'): i.material-icons menu
				h4.right.left.hide-on-large-only Deadly Daryl

		main: .wrapper
			include dashboard-tabs/patient.jade
			//include dashboard-tabs/performance.jade

		script(src='https://code.jquery.com/jquery-2.2.4.min.js')
		script(src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.97.6/js/materialize.min.js")
		script(src='./js/velocity.min.js')
		script(src='./js/chartist.min.js')
		script.
			$(document).ready(function(){
				
				$('li').not('.tab, .no').velocity(
						{ translateX: "-100px"},
						{ duration: 0 });

				$('ul').not('.tabs').each(function() {
				var time = 0;
					$(this).find('li').each(function(){

						$(this).velocity(
							{ opacity: "1", translateX: "0"},
							{ duration: 800, delay: time, easing: [60, 10] });
						time += 120;
					});
				});
				$('ul.tabs').tabs();
				$(".button-collapse").sideNav();

				var time = 0;
				$('.card-panel').each(function(){

						$(this).velocity(
							{ opacity: "1", translateX: "0"},
							{ duration: 800, delay: time, easing: [60, 10] });
						time += 60;
				})
			});
			

			var chart = new Chartist.Line('#history-chart', {
				labels: ['March', 'April', 'May', 'June', 'July'],
				series: [
					[1, 1, 0, 1, 2],
				]
			}, {
				fullWidth: true,
				//chartPadding: {
				//  right: 40
				//},
				axisY: {
					type: Chartist.FixedScaleAxis,
					ticks: [0, 1, 2],
					labelInterpolationFnc: function(value) { return ['Low', 'Med', 'High'][value];},
					low: 0,
					high: 2
				},
				height: 140,
			});

			var pie = new Chartist.Pie('#compare-chart', {
				//labels: ['Better', 'Same', 'Worse'],
				series: [30, 60, 20]

			}, {
				width: 70,
				height: 70,
				showLabel: false,
				donut: true,
				donutWidth: 10
			});

			pie.on('draw', function(data) {
				if(data.type === 'slice') {
					// Get the total path length in order to use for dash array animation
					var pathLength = data.element._node.getTotalLength();

					// Set a dasharray that matches the path length as prerequisite to animate dashoffset
					data.element.attr({
						'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
					});

					// Create animation definition while also assigning an ID to the animation for later sync usage
					var animationDefinition = {
						'stroke-dashoffset': {
							id: 'anim' + data.index,
							dur: 250,
							from: -pathLength + 'px',
							to:  '0px',
							//easing: Chartist.Svg.Easing.easeOutQuint,
							// We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)
							fill: 'freeze'
						}
					};

					// If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation
					if(data.index !== 0) {
						animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
					}

					// We need to set an initial value before the animation starts as we are not in guided mode which would do that for us
					data.element.attr({
						'stroke-dashoffset': -pathLength + 'px'
					});

					// We can't use guided mode as the animations need to rely on setting begin manually
					// See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate
					data.element.animate(animationDefinition, false);
				}
			});


			var seq = 0,
			delays = 20,
			durations = 100;

			// Once the chart is fully created we reset the sequence
			chart.on('created', function() {
				seq = 0;
			});

			// On each drawn element by Chartist we use the Chartist.Svg API to trigger SMIL animations
			chart.on('draw', function(data) {
				seq++;

				if(data.type === 'line') {
					// If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
					data.element.animate({
						opacity: {
							// The delay when we like to start the animation
							begin: seq * delays + 00,
							// Duration of the animation
							dur: durations,
							// The value where the animation should start
							from: 0,
							// The value where it should end
							to: 1
						}
					});
				} else if(data.type === 'label' && data.axis === 'x') {
					data.element.animate({
						y: {
							begin: seq * delays,
							dur: durations,
							from: data.y + 100,
							to: data.y,
							// We can specify an easing function from Chartist.Svg.Easing
							easing: 'easeOutQuart'
						}
					});
				} else if(data.type === 'label' && data.axis === 'y') {
					data.element.animate({
						x: {
							begin: seq * delays,
							dur: durations,
							from: data.x - 100,
							to: data.x,
							easing: 'easeOutQuart'
						}
					});
				} else if(data.type === 'point') {
					data.element.animate({
						x1: {
							begin: seq * delays,
							dur: durations,
							from: data.x - 10,
							to: data.x,
							easing: 'easeOutQuart'
						},
						x2: {
							begin: seq * delays,
							dur: durations,
							from: data.x - 10,
							to: data.x,
							easing: 'easeOutQuart'
						},
						opacity: {
							begin: seq * delays,
							dur: durations,
							from: 0,
							to: 1,
							easing: 'easeOutQuart'
						}
					});
				} else if(data.type === 'grid') {
					// Using data.axis we get x or y which we can use to construct our animation definition objects
					var pos1Animation = {
						begin: seq * delays,
						dur: durations,
						from: data[data.axis.units.pos + '1'] - 30,
						to: data[data.axis.units.pos + '1'],
						easing: 'easeOutQuart'
					};

					var pos2Animation = {
						begin: seq * delays,
						dur: durations,
						from: data[data.axis.units.pos + '2'] - 100,
						to: data[data.axis.units.pos + '2'],
						easing: 'easeOutQuart'
					};

					var animations = {};
					animations[data.axis.units.pos + '1'] = pos1Animation;
					animations[data.axis.units.pos + '2'] = pos2Animation;
					animations['opacity'] = {
						begin: seq * delays,
						dur: durations,
						from: 0,
						to: 1,
						easing: 'easeOutQuart'
					};

					data.element.animate(animations);
				}
			});

			
			// For the sake of the example we update the chart every time it's created with a delay of 10 seconds
			/*
			chart.on('created', function() {
				if(window.__exampleAnimateTimeout) {
					clearTimeout(window.__exampleAnimateTimeout);
					window.__exampleAnimateTimeout = null;
				}
				window.__exampleAnimateTimeout = setTimeout(chart.update.bind(chart), 12000);
			});
			*/